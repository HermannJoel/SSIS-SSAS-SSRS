/*
Deployment script for AdventureworksLTDW2016

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar SSISDB "SSISDB"
:setvar DatabaseName "AdventureworksLTDW2016"
:setvar DefaultFilePrefix "AdventureworksLTDW2016"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [SystemLog].[ExecutionMessages].[ExecutionMessageDateTime] on table [SystemLog].[ExecutionMessages] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [SystemLog].[ExecutionMessages].[ExecutionPathIdString] on table [SystemLog].[ExecutionMessages] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [SystemLog].[ExecutionMessages].[PackagePathIdString] on table [SystemLog].[ExecutionMessages] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [SystemLog].[ExecutionMessages].[SSISEventName] on table [SystemLog].[ExecutionMessages] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [SystemLog].[ExecutionMessages].[SSISPackageName] on table [SystemLog].[ExecutionMessages] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [SystemLog].[ExecutionMessages])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [SystemLog].[ExecutionMessageTypes].[SSISDBMessageType] on table [SystemLog].[ExecutionMessageTypes] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [SystemLog].[ExecutionMessageTypes])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [SystemLog].[LoadExecutions].[LoadEnvironmentId] on table [SystemLog].[LoadExecutions] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [SystemLog].[LoadExecutions])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Rename refactoring operation with key 63cde1c8-a9fc-49b2-b6b3-d455685ec8cd is skipped, element [SystemLog].[LoadEnvironments].[Id] (SqlSimpleColumn) will not be renamed to LoadEnvironmentId';


GO
PRINT N'Rename refactoring operation with key 9892c272-1765-4ac9-ae8f-c8522d3c4e74 is skipped, element [SystemLog].[ExecutionMessageTypes].[SSISMessageType] (SqlSimpleColumn) will not be renamed to [SSISDBMessageType]';


GO
PRINT N'Dropping [SystemLog].[FK_ExecutionMessages_To_LoadExecutions]...';


GO
ALTER TABLE [SystemLog].[ExecutionMessages] DROP CONSTRAINT [FK_ExecutionMessages_To_LoadExecutions];


GO
PRINT N'Dropping [SystemLog].[FK_ExecutionMessages_to_ExecutionMessageTypes]...';


GO
ALTER TABLE [SystemLog].[ExecutionMessages] DROP CONSTRAINT [FK_ExecutionMessages_to_ExecutionMessageTypes];


GO
PRINT N'Dropping [SystemLog].[FK_LoadExecutionRejects_To_LoadExecutions]...';


GO
ALTER TABLE [SystemLog].[ExecutionRejects] DROP CONSTRAINT [FK_LoadExecutionRejects_To_LoadExecutions];


GO
PRINT N'Dropping [SystemLog].[FK_ExecutionStatictics_To_LoadExecutions]...';


GO
ALTER TABLE [SystemLog].[ExecutionStatictics] DROP CONSTRAINT [FK_ExecutionStatictics_To_LoadExecutions];


GO
PRINT N'Dropping [SystemLog].[FK_Executions_To_Loads]...';


GO
ALTER TABLE [SystemLog].[LoadExecutions] DROP CONSTRAINT [FK_Executions_To_Loads];


GO
PRINT N'Dropping [SystemLog].[FK_Executions_To_ExectionStatus]...';


GO
ALTER TABLE [SystemLog].[LoadExecutions] DROP CONSTRAINT [FK_Executions_To_ExectionStatus];


GO
PRINT N'Starting rebuilding table [SystemLog].[ExecutionMessages]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [SystemLog].[tmp_ms_xx_ExecutionMessages] (
    [ExecutionMessageId]       BIGINT          IDENTITY (1, 1) NOT NULL,
    [LoadExecutionId]          BIGINT          NOT NULL,
    [SSISPackageName]          NVARCHAR (260)  NOT NULL,
    [SSISEventName]            NVARCHAR (1024) NOT NULL,
    [SourceComponentName]      NVARCHAR (500)  NULL,
    [PackagePathIdString]      NVARCHAR (4000) NOT NULL,
    [ExecutionPathIdString]    NVARCHAR (4000) NOT NULL,
    [ExecutionMessageTypeId]   TINYINT         NOT NULL,
    [ExecutionMessage]         NVARCHAR (4000) NOT NULL,
    [ExecutionMessageDateTime] DATETIME        NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_ExecutionMessages1] PRIMARY KEY CLUSTERED ([ExecutionMessageId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [SystemLog].[ExecutionMessages])
    BEGIN
        SET IDENTITY_INSERT [SystemLog].[tmp_ms_xx_ExecutionMessages] ON;
        INSERT INTO [SystemLog].[tmp_ms_xx_ExecutionMessages] ([ExecutionMessageId], [LoadExecutionId], [ExecutionMessageTypeId], [ExecutionMessage])
        SELECT   [ExecutionMessageId],
                 [LoadExecutionId],
                 [ExecutionMessageTypeId],
                 [ExecutionMessage]
        FROM     [SystemLog].[ExecutionMessages]
        ORDER BY [ExecutionMessageId] ASC;
        SET IDENTITY_INSERT [SystemLog].[tmp_ms_xx_ExecutionMessages] OFF;
    END

DROP TABLE [SystemLog].[ExecutionMessages];

EXECUTE sp_rename N'[SystemLog].[tmp_ms_xx_ExecutionMessages]', N'ExecutionMessages';

EXECUTE sp_rename N'[SystemLog].[tmp_ms_xx_constraint_PK_ExecutionMessages1]', N'PK_ExecutionMessages', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [SystemLog].[ExecutionMessageTypes]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
ALTER TABLE [SystemLog].[ExecutionMessageTypes]
    ADD [SSISDBMessageType] SMALLINT NOT NULL;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Starting rebuilding table [SystemLog].[LoadExecutions]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [SystemLog].[tmp_ms_xx_LoadExecutions] (
    [LoadExecutionId]        BIGINT   IDENTITY (1, 1) NOT NULL,
    [SSISServerExecutionId]  BIGINT   NOT NULL,
    [LoadId]                 BIGINT   NOT NULL,
    [ExecutionStatusId]      TINYINT  NOT NULL,
    [LoadEnvironmentId]      BIGINT   NOT NULL,
    [ExecutionStartDateTime] DATETIME NOT NULL,
    [ExecutionEndDateTime]   DATETIME NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_LoadExecutions1] PRIMARY KEY CLUSTERED ([LoadExecutionId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [SystemLog].[LoadExecutions])
    BEGIN
        SET IDENTITY_INSERT [SystemLog].[tmp_ms_xx_LoadExecutions] ON;
        INSERT INTO [SystemLog].[tmp_ms_xx_LoadExecutions] ([LoadExecutionId], [SSISServerExecutionId], [LoadId], [ExecutionStatusId], [ExecutionStartDateTime], [ExecutionEndDateTime])
        SELECT   [LoadExecutionId],
                 [SSISServerExecutionId],
                 [LoadId],
                 [ExecutionStatusId],
                 [ExecutionStartDateTime],
                 [ExecutionEndDateTime]
        FROM     [SystemLog].[LoadExecutions]
        ORDER BY [LoadExecutionId] ASC;
        SET IDENTITY_INSERT [SystemLog].[tmp_ms_xx_LoadExecutions] OFF;
    END

DROP TABLE [SystemLog].[LoadExecutions];

EXECUTE sp_rename N'[SystemLog].[tmp_ms_xx_LoadExecutions]', N'LoadExecutions';

EXECUTE sp_rename N'[SystemLog].[tmp_ms_xx_constraint_PK_LoadExecutions1]', N'PK_LoadExecutions', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SystemLog].[LoadEnvironments]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [SystemLog].[LoadEnvironments] (
    [LoadEnvironmentId]      BIGINT          NOT NULL,
    [EnvironmewntName]       NVARCHAR (25)   NOT NULL,
    [EnvironmentDescription] NVARCHAR (1000) NULL,
    CONSTRAINT [PK_LoadEnvironments] PRIMARY KEY CLUSTERED ([LoadEnvironmentId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SystemLog].[FK_ExecutionMessages_To_LoadExecutions]...';


GO
ALTER TABLE [SystemLog].[ExecutionMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_ExecutionMessages_To_LoadExecutions] FOREIGN KEY ([LoadExecutionId]) REFERENCES [SystemLog].[LoadExecutions] ([LoadExecutionId]);


GO
PRINT N'Creating [SystemLog].[FK_ExecutionMessages_to_ExecutionMessageTypes]...';


GO
ALTER TABLE [SystemLog].[ExecutionMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_ExecutionMessages_to_ExecutionMessageTypes] FOREIGN KEY ([ExecutionMessageTypeId]) REFERENCES [SystemLog].[ExecutionMessageTypes] ([ExecutionMessageTypeId]);


GO
PRINT N'Creating [SystemLog].[FK_LoadExecutionRejects_To_LoadExecutions]...';


GO
ALTER TABLE [SystemLog].[ExecutionRejects] WITH NOCHECK
    ADD CONSTRAINT [FK_LoadExecutionRejects_To_LoadExecutions] FOREIGN KEY ([LoadExecutionId]) REFERENCES [SystemLog].[LoadExecutions] ([LoadExecutionId]);


GO
PRINT N'Creating [SystemLog].[FK_ExecutionStatictics_To_LoadExecutions]...';


GO
ALTER TABLE [SystemLog].[ExecutionStatictics] WITH NOCHECK
    ADD CONSTRAINT [FK_ExecutionStatictics_To_LoadExecutions] FOREIGN KEY ([LoadExecutionId]) REFERENCES [SystemLog].[LoadExecutions] ([LoadExecutionId]);


GO
PRINT N'Creating [SystemLog].[FK_Executions_To_Loads]...';


GO
ALTER TABLE [SystemLog].[LoadExecutions] WITH NOCHECK
    ADD CONSTRAINT [FK_Executions_To_Loads] FOREIGN KEY ([LoadId]) REFERENCES [SystemLog].[Loads] ([LoadId]);


GO
PRINT N'Creating [SystemLog].[FK_Executions_To_ExectionStatus]...';


GO
ALTER TABLE [SystemLog].[LoadExecutions] WITH NOCHECK
    ADD CONSTRAINT [FK_Executions_To_ExectionStatus] FOREIGN KEY ([ExecutionStatusId]) REFERENCES [SystemLog].[ExecutionStatus] ([ExecutionStatusId]);


GO
PRINT N'Creating [SystemLog].[FK_Executions_To_LoadEnvironment]...';


GO
ALTER TABLE [SystemLog].[LoadExecutions] WITH NOCHECK
    ADD CONSTRAINT [FK_Executions_To_LoadEnvironment] FOREIGN KEY ([LoadEnvironmentId]) REFERENCES [SystemLog].[LoadEnvironments] ([LoadEnvironmentId]);


GO
PRINT N'Altering [SystemLog].[CloseLoadExecution]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
ALTER PROCEDURE [SystemLog].[CloseLoadExecution]
    @LoadExecutionId BIGINT
AS
    DECLARE @SSISExecutionId BIGINT = 0, @EndExecutionDateTime DATETIME = GETDATE();
	DECLARE @SSISExecutionIdTbl TABLE (SSISExecutionId BIGINT NOT NULL);
	
    UPDATE  [le]
    SET     [le].[ExecutionEndDateTime] = @EndExecutionDateTime
    OUTPUT  [Inserted].[SSISServerExecutionId]
            INTO @SSISExecutionIdTbl
    FROM    [SystemLog].[LoadExecutions] AS [le]
    WHERE   [le].[LoadExecutionId] = @LoadExecutionId;


	-- Retreive Catalog Execution statstics and insert them into [SystemLog].[ExecutionStatistics] table
    INSERT  INTO [SystemLog].[ExecutionStatictics]
            (
              [LoadExecutionId]
            , [SSISProjectName]
            , [SSISPackageName]
            , [SSISPackageStartDateTime]
            , [SSISPackageEndDateTime]
            , [DataFlowPathIdString]
            , [SourceComponentName]
            , [DestinationComponentName]
            , [RowsSent]
	        )
            SELECT  @LoadExecutionId
				  , [e].[project_name]
                  , [eds].[package_name]
                  , [e].[start_time] AS [package_start_time]
                  , [e].[end_time] AS [package_end_time]
                  , [dataflow_path_id_string]
                  , [source_component_name]
                  , [destination_component_name]
                  , SUM([rows_sent]) AS [rows_sent]
            FROM    [$(SSISDB)].[catalog].[execution_data_statistics] AS [eds]
                    INNER JOIN [$(SSISDB)].[catalog].[executions] AS [e] ON [e].[execution_id] = [eds].[execution_id]
            WHERE   [e].[execution_id] = @SSISExecutionId
            GROUP BY [eds].[package_name]
                  , [e].[start_time]
                  , [e].[end_time]
                  , [dataflow_path_id_string]
                  , [source_component_name]
                  , [destination_component_name];

				  --Retrieve execution messages and insert them innsert them into [SystemLog].[ExecutionMessages] table
    WITH    [ExecutionMessage] ( [RoundedMessageTime], [message], [package_name], [event_name], [message_source_name], [subcomponent_name], [package_path], [execution_path], [ExecutionMessageTypeId] )
              AS ( SELECT TOP 100 PERCENT
                            CAST(YEAR([message_time]) AS NVARCHAR) + '-'
                            + LEFT('0'
                                   + CAST(MONTH([message_time]) AS NVARCHAR) ,
                                   2) + '-' + LEFT('0'
                                                   + CAST(DAY([message_time]) AS NVARCHAR) ,
                                                   2) + ' ' + LEFT('0'
                                                              + CAST(DATEPART(HOUR ,
                                                              [message_time]) AS NVARCHAR) ,
                                                              2) + ':'
                            + LEFT('0'
                                   + CAST(DATEPART(MINUTE , [message_time]) AS NVARCHAR) ,
                                   2) + ':' + LEFT('0'
                                                   + CAST(DATEPART(SECOND ,
                                                              [message_time]) AS NVARCHAR) ,
                                                   2) AS [RoundedMessageTime]
                          , [message]
                          , [package_name]
                          , [event_name]
                          , [message_source_name]
                          , [subcomponent_name]
                          , [package_path]
                          , [execution_path]
						  , [emt].[ExecutionMessageTypeId]
                   FROM     [$(SSISDB)].[catalog].[event_messages] AS [em]
                            INNER JOIN [SystemLog].[ExecutionMessageTypes] AS [emt] ON [em].[message_type] = [emt].[SSISDBMessageType]
                   WHERE    [operation_id] = @SSISExecutionId
                   ORDER BY [message_time]
                 )
        INSERT  INTO [SystemLog].[ExecutionMessages]
                (
                  [LoadExecutionId]
                , [ExecutionMessageDateTime]
                , [ExecutionMessage]
                , [SSISPackageName]
                , [SSISEventName]
                , [SourceComponentName]
                , [PackagePathIdString]
                , [ExecutionPathIdString]
				, [ExecutionMessageTypeId]

	            )
                SELECT DISTINCT
                        @LoadExecutionId
                      , [RoundedMessageTime]
                      , [message]
                      , [package_name]
                      , [event_name]
                      , [message_source_name]
                      , [subcomponent_name]
                      , [package_path]
                      , [execution_path]
                FROM    [ExecutionMessage];
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [SystemLog].[OpenLoadExecution]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[SystemLog].[OpenLoadExecution]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '63cde1c8-a9fc-49b2-b6b3-d455685ec8cd')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('63cde1c8-a9fc-49b2-b6b3-d455685ec8cd')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9892c272-1765-4ac9-ae8f-c8522d3c4e74')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9892c272-1765-4ac9-ae8f-c8522d3c4e74')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
--:R DimensionsUnknownMembers.sql

	--ExecutionMessageTypes fixed members
    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionMessageTypes]
                    WHERE   [ExecutionMessageTypeId] = 1 )
        BEGIN
            INSERT  [SystemLog].[ExecutionMessageTypes]
                    ( [ExecutionMessageTypeId] ,
                      [ExecutionMessageTypeName] ,
                      [ExecutionMessageTypeDescription],
					  [SSISDBMessageType]
                    )
            VALUES  ( 1 ,
                      N'Error' ,
                      N'The message logged contains the error derscription.',
					  120
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionMessageTypes]
                    WHERE   [ExecutionMessageTypeId] = 2 )
        BEGIN
            INSERT  [SystemLog].[ExecutionMessageTypes]
                    ( [ExecutionMessageTypeId] ,
                      [ExecutionMessageTypeName] ,
                      [ExecutionMessageTypeDescription],
					  [SSISDBMessageType]
                    )
            VALUES  ( 2 ,
                      N'Warning' ,
                      N'The message logged is a warning.',
					  110
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionMessageTypes]
                    WHERE   [ExecutionMessageTypeId] = 3 )
        BEGIN
            INSERT  [SystemLog].[ExecutionMessageTypes]
                    ( [ExecutionMessageTypeId] ,
                      [ExecutionMessageTypeName] ,
                      [ExecutionMessageTypeDescription],
					  [SSISDBMessageType]
                    )
            VALUES  ( 3 ,
                      N'Information' ,
                      N'The message logged is informative only.',
					  70
                    );
        END;


--ExecutionStatus fixed members
    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 0 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 0 ,
                      N'Unkmown' ,
                      N''
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 1 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 1 ,
                      N'Execution created' ,
                      N'The SSIS execution has been initiated.'
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 2 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 2 ,
                      N'Running' ,
                      N'The SSIS execution is currently running.'
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 3 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 3 ,
                      N'Cancelled' ,
                      N'The SSIS execution has been cancelled.'
                    );
        END;


    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 4 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 4 ,
                      N'Failed' ,
                      N'The SSIS execution encountered errors.'
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 5 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 5 ,
                      N'Pending' ,
                      N'The SSIS execution is pending.'
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 6 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 6 ,
                      N'Ended unexpectedly' ,
                      N'The SSIS execution could not finish.'
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 7 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 7 ,
                      N'Succeeded' ,
                      N'The SSIS execution completed successfully.'
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 8 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 8 ,
                      N'Stopping' ,
                      N'The SSIS execution is currently stopping.'
                    );
        END;
    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 9 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 9 ,
                      N'Completed' ,
                      N'The SSIS execution has completed.'
                    );
        END;

   --SystmeLog.LoadApplication unkmown member
    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[LoadApplications] AS [la]
                    WHERE   [la].[LoadApplicationId] = 0 )
        BEGIN
            SET IDENTITY_INSERT [SystemLog].[LoadApplications] ON;
            INSERT  INTO [SystemLog].[LoadApplications]
                    ( [LoadApplicationId] ,
                      [ApplicationName] ,
                      [ApplicationDescription]
                    )
            VALUES  ( 0 ,
                      N'Unknown',
                      N'Unknown load application'
		            );
            SET IDENTITY_INSERT [SystemLog].[LoadApplications] OFF;
        END;

		--SystmeLog.LoadApplication SSIS CookBook application
    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[LoadApplications] AS [la]
                    WHERE   [la].[LoadApplicationId] = 1 )
        BEGIN
            SET IDENTITY_INSERT [SystemLog].[LoadApplications] ON;
            INSERT  INTO [SystemLog].[LoadApplications]
                    ( [LoadApplicationId] ,
                      [ApplicationName] ,
                      [ApplicationDescription]
                    )
            VALUES  ( 1 ,
                      N'SSIS CookBook',
                      N'SSIS CookBook sample application'
		            );
            SET IDENTITY_INSERT [SystemLog].[LoadApplications] OFF;
        END;

	--SystmeLog.Loads unkmown member
    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[Loads] AS [l]
                    WHERE   [l].[LoadId] =-1 )
        BEGIN
            SET IDENTITY_INSERT [SystemLog].[Loads] ON;
            INSERT  INTO [SystemLog].[Loads]
                    ( [LoadId] ,
                      [LoadStartDateTime] ,
                      [LoadEndDateTime] ,
                      [LoadStatusId],
					  [LoadApplicationId]
                    )
            VALUES  ( -1 ,
                      CAST('1900-01-01' AS DATETIME) ,
                      CAST('1900-01-01' AS DATETIME) ,
                      0,
					  0
		            );
            SET IDENTITY_INSERT [SystemLog].[Loads] OFF;
        END;
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [SystemLog].[ExecutionMessages] WITH CHECK CHECK CONSTRAINT [FK_ExecutionMessages_To_LoadExecutions];

ALTER TABLE [SystemLog].[ExecutionMessages] WITH CHECK CHECK CONSTRAINT [FK_ExecutionMessages_to_ExecutionMessageTypes];

ALTER TABLE [SystemLog].[ExecutionRejects] WITH CHECK CHECK CONSTRAINT [FK_LoadExecutionRejects_To_LoadExecutions];

ALTER TABLE [SystemLog].[ExecutionStatictics] WITH CHECK CHECK CONSTRAINT [FK_ExecutionStatictics_To_LoadExecutions];

ALTER TABLE [SystemLog].[LoadExecutions] WITH CHECK CHECK CONSTRAINT [FK_Executions_To_Loads];

ALTER TABLE [SystemLog].[LoadExecutions] WITH CHECK CHECK CONSTRAINT [FK_Executions_To_ExectionStatus];

ALTER TABLE [SystemLog].[LoadExecutions] WITH CHECK CHECK CONSTRAINT [FK_Executions_To_LoadEnvironment];


GO
PRINT N'Update complete.';


GO
