/*
Deployment script for AdventureworksLTDW2016

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AdventureworksLTDW2016"
:setvar DefaultFilePrefix "AdventureworksLTDW2016"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE Latin1_General_100_CI_AI
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                ARITHABORT OFF,
                CONCAT_NULL_YIELDS_NULL OFF,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT OFF,
                CURSOR_DEFAULT GLOBAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK ON,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY CHECKSUM,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [Cube]...';


GO
CREATE SCHEMA [Cube]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [DW]...';


GO
CREATE SCHEMA [DW]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Staging]...';


GO
CREATE SCHEMA [Staging]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [SystemLog]...';


GO
CREATE SCHEMA [SystemLog]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Cube].[DimPurchaseOrder]...';


GO
CREATE TABLE [Cube].[DimPurchaseOrder] (
    [IDPurchaseOrder] INT          IDENTITY (1, 1) NOT NULL,
    [PurchaseOrder]   VARCHAR (25) NULL
);


GO
PRINT N'Creating [Cube].[DimSalesOrder]...';


GO
CREATE TABLE [Cube].[DimSalesOrder] (
    [IDSalesOrder]     INT          IDENTITY (1, 1) NOT NULL,
    [SalesOrderNumber] VARCHAR (25) NOT NULL
);


GO
PRINT N'Creating [DW].[DimAddress]...';


GO
CREATE TABLE [DW].[DimAddress] (
    [IDAddress]       INT           NOT NULL,
    [Address]         VARCHAR (500) NOT NULL,
    [City]            VARCHAR (100) NOT NULL,
    [ProvState]       VARCHAR (100) NOT NULL,
    [Country]         VARCHAR (100) NOT NULL,
    [PostalCode]      VARCHAR (25)  NOT NULL,
    [LoadExecutionId] BIGINT        NOT NULL,
    CONSTRAINT [DimAddress_PK] PRIMARY KEY CLUSTERED ([IDAddress] ASC)
);


GO
PRINT N'Creating [DW].[DimCustomer]...';


GO
CREATE TABLE [DW].[DimCustomer] (
    [IDCustomer]      INT           IDENTITY (1, 1) NOT NULL,
    [CustomerID]      INT           NOT NULL,
    [Title]           VARCHAR (8)   NOT NULL,
    [FirstName]       VARCHAR (50)  NOT NULL,
    [MiddleName]      VARCHAR (50)  NOT NULL,
    [LastName]        VARCHAR (50)  NOT NULL,
    [Suffix]          VARCHAR (10)  NOT NULL,
    [CompanyName]     VARCHAR (128) NOT NULL,
    [ADWSalesPerson]  VARCHAR (256) NOT NULL,
    [EmailAddress]    VARCHAR (50)  NOT NULL,
    [Phone]           VARCHAR (25)  NOT NULL,
    [CustomerEffDate] DATETIME      NOT NULL,
    [CustomerEndDate] DATETIME      NULL,
    [CustomerCurrent] BIT           NOT NULL,
    [LoadExecutionId] BIGINT        NOT NULL,
    CONSTRAINT [DimCustomer_PK] PRIMARY KEY CLUSTERED ([IDCustomer] ASC)
);


GO
PRINT N'Creating [DW].[DimOrderProvenance]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [DW].[DimOrderProvenance] (
    [IDOrderProvenance]     SMALLINT     IDENTITY (1, 1) NOT NULL,
    [ProvenanceCode]        SMALLINT     NOT NULL,
    [ProvenanceDescription] VARCHAR (50) NOT NULL,
    [LoadExecutionId]       BIGINT       NOT NULL,
    CONSTRAINT [DimOrderProvenance_PK] PRIMARY KEY CLUSTERED ([IDOrderProvenance] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [DW].[DimProduct]...';


GO
CREATE TABLE [DW].[DimProduct] (
    [IDProduct]          SMALLINT       NOT NULL,
    [ProductNumber]      VARCHAR (25)   NOT NULL,
    [ProductName]        VARCHAR (50)   NOT NULL,
    [EnglishDescription] VARCHAR (400)  NOT NULL,
    [FrenchDescription]  VARCHAR (400)  NOT NULL,
    [Color]              VARCHAR (25)   NOT NULL,
    [Size]               VARCHAR (5)    NOT NULL,
    [Weight]             DECIMAL (8, 2) NOT NULL,
    [StandardCost]       MONEY          NOT NULL,
    [ListPrice]          MONEY          NOT NULL,
    [ModelName]          VARCHAR (50)   NOT NULL,
    [Category]           VARCHAR (50)   NOT NULL,
    [SubCategory]        VARCHAR (50)   NOT NULL,
    [LoadExecutionId]    BIGINT         NOT NULL,
    CONSTRAINT [DimProduct_PK] PRIMARY KEY CLUSTERED ([IDProduct] ASC)
);


GO
PRINT N'Creating [DW].[DimTime]...';


GO
CREATE TABLE [DW].[DimTime] (
    [IDTime]           BIGINT       NOT NULL,
    [DateOfDay]        DATETIME     NOT NULL,
    [DayName]          VARCHAR (20) NOT NULL,
    [DayNbOfTheWeek]   TINYINT      NOT NULL,
    [DayNbOfTheMonth]  TINYINT      NOT NULL,
    [DayNbOfTheYear]   SMALLINT     NOT NULL,
    [MonthName]        VARCHAR (20) NOT NULL,
    [MonthNb]          TINYINT      NOT NULL,
    [WeekNbOfTheMonth] TINYINT      NOT NULL,
    [QuaterNb]         TINYINT      NOT NULL,
    [YearNb]           SMALLINT     NOT NULL,
    [IsWeekDayFlag]    BIT          NOT NULL,
    [IsHolidayFlag]    BIT          NOT NULL,
    CONSTRAINT [DimTime_PK] PRIMARY KEY CLUSTERED ([IDTime] ASC)
);


GO
PRINT N'Creating [DW].[FactOrders]...';


GO
CREATE TABLE [DW].[FactOrders] (
    [IDOrderDate]         BIGINT       NOT NULL,
    [IDShipDate]          BIGINT       NOT NULL,
    [IDDueDate]           BIGINT       NOT NULL,
    [IDProduct]           SMALLINT     NOT NULL,
    [IDCustomer]          INT          NOT NULL,
    [IDBillingAddress]    INT          NOT NULL,
    [IDShippingAddress]   INT          NOT NULL,
    [IDOrderProvenance]   SMALLINT     NOT NULL,
    [OrderQy]             SMALLINT     NOT NULL,
    [UnitPrice]           MONEY        NOT NULL,
    [Discount]            MONEY        NOT NULL,
    [TaxAmount]           MONEY        NOT NULL,
    [Freight]             MONEY        NOT NULL,
    [SalesOrderNumber]    VARCHAR (25) NOT NULL,
    [PurchaseOrderNumber] VARCHAR (25) NULL,
    [LoadExecutionId]     BIGINT       NOT NULL,
    CONSTRAINT [FactOrders_PK] PRIMARY KEY CLUSTERED ([IDOrderDate] ASC, [IDProduct] ASC, [IDCustomer] ASC, [IDBillingAddress] ASC, [IDShippingAddress] ASC, [IDShipDate] ASC, [IDDueDate] ASC)
);


GO
PRINT N'Creating [Staging].[StgAddress]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Staging].[StgAddress] (
    [AddressID]       INT          NOT NULL,
    [AddressLine1]    VARCHAR (60) NOT NULL,
    [AddressLine2]    VARCHAR (60) NULL,
    [City]            VARCHAR (30) NOT NULL,
    [StateProvince]   VARCHAR (50) NULL,
    [PostalCode]      VARCHAR (15) NOT NULL,
    [CountryRegion]   VARCHAR (50) NOT NULL,
    [ModifiedDate]    DATETIME     NOT NULL,
    [LoadExecutionId] BIGINT       NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Staging].[StgCustomer]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Staging].[StgCustomer] (
    [CustomerID]      INT           NOT NULL,
    [NameStyle]       BIT           NOT NULL,
    [Title]           VARCHAR (8)   NULL,
    [FirstName]       VARCHAR (50)  NOT NULL,
    [MiddleName]      VARCHAR (50)  NULL,
    [LastName]        VARCHAR (50)  NOT NULL,
    [Suffix]          VARCHAR (10)  NULL,
    [CompanyName]     VARCHAR (128) NULL,
    [SalesPerson]     VARCHAR (256) NULL,
    [EmailAddress]    VARCHAR (50)  NULL,
    [Phone]           VARCHAR (25)  NULL,
    [PasswordHash]    VARCHAR (128) NOT NULL,
    [PasswordSalt]    VARCHAR (10)  NOT NULL,
    [ModifiedDate]    DATETIME      NOT NULL,
    [LoadExecutionId] BIGINT        NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Staging].[StgCustomerAddress]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Staging].[StgCustomerAddress] (
    [CustomerID]      INT          NOT NULL,
    [AddressID]       INT          NOT NULL,
    [AddressType]     VARCHAR (50) NOT NULL,
    [ModifiedDate]    DATETIME     NOT NULL,
    [LoadExecutionId] BIGINT       NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Staging].[StgProduct]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Staging].[StgProduct] (
    [ProductID]         INT            NOT NULL,
    [Name]              VARCHAR (50)   NOT NULL,
    [ProductNumber]     VARCHAR (25)   NOT NULL,
    [Color]             VARCHAR (15)   NULL,
    [StandardCost]      MONEY          NOT NULL,
    [ListPrice]         MONEY          NOT NULL,
    [Size]              VARCHAR (5)    NULL,
    [Weight]            DECIMAL (8, 2) NULL,
    [ProductModelID]    INT            NULL,
    [ProductCategoryID] INT            NOT NULL,
    [SellStartDate]     DATETIME       NOT NULL,
    [SellEndDate]       DATETIME       NULL,
    [DiscontinuedDate]  DATETIME       NULL,
    [ModifiedDate]      DATETIME       NOT NULL,
    [LoadExecutionId]   BIGINT         NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Staging].[StgProductCategory]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Staging].[StgProductCategory] (
    [ProductCategoryID]       INT          NOT NULL,
    [ParentProductCategoryID] INT          NULL,
    [Name]                    VARCHAR (50) NOT NULL,
    [ModifiedDate]            DATETIME     NOT NULL,
    [LoadExecutionId]         BIGINT       NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Staging].[StgProductDescription]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Staging].[StgProductDescription] (
    [ProductDescriptionID] INT           NOT NULL,
    [Description]          VARCHAR (400) NOT NULL,
    [ModifiedDate]         DATETIME      NOT NULL,
    [LoadExecutionId]      BIGINT        NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Staging].[StgProductModel]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Staging].[StgProductModel] (
    [ProductModelID]     INT          NOT NULL,
    [Name]               VARCHAR (50) NOT NULL,
    [CatalogDescription] XML          NULL,
    [ModifiedDate]       DATETIME     NOT NULL,
    [LoadExecutionId]    BIGINT       NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Staging].[StgProductModelProductDescription]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Staging].[StgProductModelProductDescription] (
    [ProductModelID]       INT          NOT NULL,
    [ProductDescriptionID] INT          NOT NULL,
    [Culture]              VARCHAR (10) NOT NULL,
    [ModifiedDate]         DATETIME     NOT NULL,
    [LoadExecutionId]      BIGINT       NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Staging].[StgSalesOrderDetail]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Staging].[StgSalesOrderDetail] (
    [SalesOrderID]       INT             NOT NULL,
    [OrderQty]           SMALLINT        NOT NULL,
    [ProductID]          INT             NOT NULL,
    [UnitPrice]          MONEY           NOT NULL,
    [UnitPriceDiscount]  MONEY           NOT NULL,
    [LineTotal]          NUMERIC (38, 6) NOT NULL,
    [ModifiedDate]       DATETIME        NOT NULL,
    [SalesOrderDetailID] INT             NOT NULL,
    [LoadExecutionId]    BIGINT          NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [Staging].[StgSalesOrderHeader]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [Staging].[StgSalesOrderHeader] (
    [SalesOrderID]           INT           NOT NULL,
    [RevisionNumber]         TINYINT       NOT NULL,
    [OrderDate]              DATETIME      NOT NULL,
    [DueDate]                DATETIME      NOT NULL,
    [ShipDate]               DATETIME      NULL,
    [Status]                 TINYINT       NOT NULL,
    [OnlineOrderFlag]        BIT           NOT NULL,
    [SalesOrderNumber]       VARCHAR (25)  NOT NULL,
    [PurchaseOrderNumber]    VARCHAR (25)  NULL,
    [AccountNumber]          VARCHAR (25)  NULL,
    [CustomerID]             INT           NOT NULL,
    [ShipMethod]             VARCHAR (50)  NOT NULL,
    [CreditCardApprovalCode] VARCHAR (15)  NULL,
    [SubTotal]               MONEY         NOT NULL,
    [TaxAmt]                 MONEY         NOT NULL,
    [Freight]                MONEY         NOT NULL,
    [TotalDue]               MONEY         NOT NULL,
    [Comment]                VARCHAR (128) NULL,
    [ModifiedDate]           DATETIME      NOT NULL,
    [ShipToAddressID]        INT           NOT NULL,
    [BillToAddressID]        INT           NOT NULL,
    [LoadExecutionId]        BIGINT        NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SystemLog].[ExecutionMessageTypes]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [SystemLog].[ExecutionMessageTypes] (
    [ExecutionMessageTypeId]          TINYINT       NOT NULL,
    [ExecutionMessageTypeName]        NVARCHAR (20) NOT NULL,
    [ExecutionMessageTypeDescription] VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_ExecutionMessageTypes] PRIMARY KEY CLUSTERED ([ExecutionMessageTypeId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SystemLog].[LoadApplications]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [SystemLog].[LoadApplications] (
    [LoadApplicationId]      TINYINT        IDENTITY (1, 1) NOT NULL,
    [ApplicationName]        NVARCHAR (100) NOT NULL,
    [ApplicationDescription] NVARCHAR (200) NOT NULL,
    CONSTRAINT [PK_LoadApplications] PRIMARY KEY CLUSTERED ([LoadApplicationId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SystemLog].[ExecutionRejects]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [SystemLog].[ExecutionRejects] (
    [ExecutionRejectsId] BIGINT         IDENTITY (1, 1) NOT NULL,
    [LoadExecutionId]    BIGINT         NOT NULL,
    [Code]               VARCHAR (100)  NOT NULL,
    [RowValues]          VARCHAR (4000) NOT NULL,
    CONSTRAINT [PK_LoadRejects] PRIMARY KEY CLUSTERED ([ExecutionRejectsId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SystemLog].[ExecutionStatus]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [SystemLog].[ExecutionStatus] (
    [ExecutionStatusId]          TINYINT        NOT NULL,
    [ExecutionStatusName]        NVARCHAR (25)  NOT NULL,
    [ExecutionStatusDescription] NVARCHAR (100) NOT NULL,
    CONSTRAINT [PK_ExecutionStatus] PRIMARY KEY CLUSTERED ([ExecutionStatusId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SystemLog].[ExecutionMessages]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [SystemLog].[ExecutionMessages] (
    [ExecutionMessageId]     BIGINT          IDENTITY (1, 1) NOT NULL,
    [LoadExecutionId]        BIGINT          NOT NULL,
    [ExecutionMessageTypeId] TINYINT         NOT NULL,
    [ExecutionMessage]       NVARCHAR (4000) NOT NULL,
    CONSTRAINT [PK_ExecutionMessages] PRIMARY KEY CLUSTERED ([ExecutionMessageId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SystemLog].[ExecutionStatictics]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [SystemLog].[ExecutionStatictics] (
    [ExecutionStatisticId]     BIGINT             IDENTITY (1, 1) NOT NULL,
    [LoadExecutionId]          BIGINT             NOT NULL,
    [SSISProjectName]          NVARCHAR (260)     NOT NULL,
    [SSISPackageName]          NVARCHAR (260)     NOT NULL,
    [SSISPackageStartDateTime] DATETIMEOFFSET (7) NOT NULL,
    [SSISPackageEndDateTime]   DATETIMEOFFSET (7) NOT NULL,
    [DataFlowPathIdString]     NVARCHAR (4000)    NOT NULL,
    [SourceComponentName]      NVARCHAR (500)     NOT NULL,
    [DestinationComponentName] NVARCHAR (500)     NOT NULL,
    [RowsSent]                 INT                NOT NULL,
    CONSTRAINT [PK_ExecutionStatistics] PRIMARY KEY CLUSTERED ([ExecutionStatisticId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SystemLog].[LoadExecutions]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [SystemLog].[LoadExecutions] (
    [LoadExecutionId]        BIGINT   IDENTITY (1, 1) NOT NULL,
    [SSISServerExecutionId]  BIGINT   NOT NULL,
    [LoadId]                 BIGINT   NOT NULL,
    [ExecutionStatusId]      TINYINT  NOT NULL,
    [ExecutionStartDateTime] DATETIME NOT NULL,
    [ExecutionEndDateTime]   DATETIME NULL,
    CONSTRAINT [PK_LoadExecutions] PRIMARY KEY CLUSTERED ([LoadExecutionId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SystemLog].[Loads]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [SystemLog].[Loads] (
    [LoadId]            BIGINT   IDENTITY (1, 1) NOT NULL,
    [LoadApplicationId] TINYINT  NOT NULL,
    [LoadStartDateTime] DATETIME NOT NULL,
    [LoadEndDateTime]   DATETIME NULL,
    [LoadStatusId]      TINYINT  NOT NULL,
    CONSTRAINT [PK_LoadId] PRIMARY KEY CLUSTERED ([LoadId] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ApplicationGlobalConfigurations]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [dbo].[ApplicationGlobalConfigurations] (
    [ConfigurationID]     INT            IDENTITY (1, 1) NOT NULL,
    [ConfigurationFilter] NVARCHAR (255) NOT NULL,
    [ConfiguredValue]     NVARCHAR (255) NULL,
    [PackagePath]         NVARCHAR (255) NOT NULL,
    [ConfiguredValueType] NVARCHAR (20)  NOT NULL,
    CONSTRAINT [PK_ApplicationGlobalConfigurations] PRIMARY KEY CLUSTERED ([ConfigurationID] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ApplicationRejects]...';


GO
CREATE TABLE [dbo].[ApplicationRejects] (
    [Code]              VARCHAR (100)  NOT NULL,
    [Description]       VARCHAR (4000) NULL,
    [InformationTypeID] TINYINT        NOT NULL
);


GO
PRINT N'Creating [DW].[DimAddress_FactOrders_FK1]...';


GO
ALTER TABLE [DW].[FactOrders]
    ADD CONSTRAINT [DimAddress_FactOrders_FK1] FOREIGN KEY ([IDBillingAddress]) REFERENCES [DW].[DimAddress] ([IDAddress]);


GO
PRINT N'Creating [DW].[DimAddress_FactOrders_FK2]...';


GO
ALTER TABLE [DW].[FactOrders]
    ADD CONSTRAINT [DimAddress_FactOrders_FK2] FOREIGN KEY ([IDShippingAddress]) REFERENCES [DW].[DimAddress] ([IDAddress]);


GO
PRINT N'Creating [DW].[DimCustomer_FactOrders_FK1]...';


GO
ALTER TABLE [DW].[FactOrders]
    ADD CONSTRAINT [DimCustomer_FactOrders_FK1] FOREIGN KEY ([IDCustomer]) REFERENCES [DW].[DimCustomer] ([IDCustomer]);


GO
PRINT N'Creating [DW].[DimOrderProvenance_FactOrders_FK1]...';


GO
ALTER TABLE [DW].[FactOrders]
    ADD CONSTRAINT [DimOrderProvenance_FactOrders_FK1] FOREIGN KEY ([IDOrderProvenance]) REFERENCES [DW].[DimOrderProvenance] ([IDOrderProvenance]);


GO
PRINT N'Creating [DW].[DimProduct_FactOrders_FK1]...';


GO
ALTER TABLE [DW].[FactOrders]
    ADD CONSTRAINT [DimProduct_FactOrders_FK1] FOREIGN KEY ([IDProduct]) REFERENCES [DW].[DimProduct] ([IDProduct]);


GO
PRINT N'Creating [DW].[DimTime_FactOrders_FK1]...';


GO
ALTER TABLE [DW].[FactOrders]
    ADD CONSTRAINT [DimTime_FactOrders_FK1] FOREIGN KEY ([IDOrderDate]) REFERENCES [DW].[DimTime] ([IDTime]);


GO
PRINT N'Creating [DW].[DimTime_FactOrders_FK2]...';


GO
ALTER TABLE [DW].[FactOrders]
    ADD CONSTRAINT [DimTime_FactOrders_FK2] FOREIGN KEY ([IDShipDate]) REFERENCES [DW].[DimTime] ([IDTime]);


GO
PRINT N'Creating [DW].[DimTime_FactOrders_FK3]...';


GO
ALTER TABLE [DW].[FactOrders]
    ADD CONSTRAINT [DimTime_FactOrders_FK3] FOREIGN KEY ([IDDueDate]) REFERENCES [DW].[DimTime] ([IDTime]);


GO
PRINT N'Creating [SystemLog].[FK_LoadExecutionRejects_To_LoadExecutions]...';


GO
ALTER TABLE [SystemLog].[ExecutionRejects]
    ADD CONSTRAINT [FK_LoadExecutionRejects_To_LoadExecutions] FOREIGN KEY ([LoadExecutionId]) REFERENCES [SystemLog].[LoadExecutions] ([LoadExecutionId]);


GO
PRINT N'Creating [SystemLog].[FK_ExecutionMessages_To_LoadExecutions]...';


GO
ALTER TABLE [SystemLog].[ExecutionMessages]
    ADD CONSTRAINT [FK_ExecutionMessages_To_LoadExecutions] FOREIGN KEY ([LoadExecutionId]) REFERENCES [SystemLog].[LoadExecutions] ([LoadExecutionId]);


GO
PRINT N'Creating [SystemLog].[FK_ExecutionMessages_to_ExecutionMessageTypes]...';


GO
ALTER TABLE [SystemLog].[ExecutionMessages]
    ADD CONSTRAINT [FK_ExecutionMessages_to_ExecutionMessageTypes] FOREIGN KEY ([ExecutionMessageTypeId]) REFERENCES [SystemLog].[ExecutionMessageTypes] ([ExecutionMessageTypeId]);


GO
PRINT N'Creating [SystemLog].[FK_ExecutionStatictics_To_LoadExecutions]...';


GO
ALTER TABLE [SystemLog].[ExecutionStatictics]
    ADD CONSTRAINT [FK_ExecutionStatictics_To_LoadExecutions] FOREIGN KEY ([LoadExecutionId]) REFERENCES [SystemLog].[LoadExecutions] ([LoadExecutionId]);


GO
PRINT N'Creating [SystemLog].[FK_Executions_To_Loads]...';


GO
ALTER TABLE [SystemLog].[LoadExecutions]
    ADD CONSTRAINT [FK_Executions_To_Loads] FOREIGN KEY ([LoadId]) REFERENCES [SystemLog].[Loads] ([LoadId]);


GO
PRINT N'Creating [SystemLog].[FK_Executions_To_ExectionStatus]...';


GO
ALTER TABLE [SystemLog].[LoadExecutions]
    ADD CONSTRAINT [FK_Executions_To_ExectionStatus] FOREIGN KEY ([ExecutionStatusId]) REFERENCES [SystemLog].[ExecutionStatus] ([ExecutionStatusId]);


GO
PRINT N'Creating [SystemLog].[FK_Loads_To_LoadApplications]...';


GO
ALTER TABLE [SystemLog].[Loads]
    ADD CONSTRAINT [FK_Loads_To_LoadApplications] FOREIGN KEY ([LoadApplicationId]) REFERENCES [SystemLog].[LoadApplications] ([LoadApplicationId]);


GO
PRINT N'Creating [SystemLog].[FK_Loads_To_ExectionStatus]...';


GO
ALTER TABLE [SystemLog].[Loads]
    ADD CONSTRAINT [FK_Loads_To_ExectionStatus] FOREIGN KEY ([LoadStatusId]) REFERENCES [SystemLog].[ExecutionStatus] ([ExecutionStatusId]);


GO
PRINT N'Creating [SystemLog].[GetStatusTypeID]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE FUNCTION [SystemLog].[GetStatusTypeID]
(@STATUSNAME VARCHAR (25))
RETURNS TINYINT
AS
BEGIN
	declare @Return TINYINT

	SELECT @Return = StatusID
	FROM SystemLog.Status
	WHERE StatusName = @STATUSNAME;
	
    RETURN ISNULL(@return, 0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SystemLog].[GetInformationTypeID]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE FUNCTION [SystemLog].[GetInformationTypeID]
(@INFORMATIONTYPENAME VARCHAR (25))
RETURNS TINYINT
AS
BEGIN
	declare @Return TINYINT

	SELECT @Return = InformationTypeID
	FROM SystemLog.InformationType
	WHERE InformationTypeName = @INFORMATIONTYPENAME;
	
    RETURN ISNULL(@return, 0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ParsePipeline]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE FUNCTION [dbo].[ParsePipeline]
(@message VARCHAR (8000), @which INT)
RETURNS VARCHAR (200)
AS
begin
	--@which defines which value is desired
	-- 1= PathID
	-- 2= declare PathIDName
	-- 3= declare ComponentID
	-- 4= declare ComponentIDName
	-- 5= declare InputID
	-- 6= declare InputIDName
	-- 7= declare rowssent

	declare @sourcemessage varchar(600)	
	declare @where as integer
	declare @mycounter integer

	If @which < 1 or @which > 7 return null
	set @mycounter=0
	--catch older versions of the messages that lacked the extra parameters
	if patindex('%:  :%', @message) = 0 return null
	
	--chop the initial wordy stuff out
	set @sourcemessage = right(@message, len(@message) - patindex('%:  :%', @message) - 3)

	--loop through occurances of : until we get to the desired one
	set @where = 99
	while @where <> 0 begin
		set @mycounter = @mycounter+1
		set @where = patindex('%:%',@sourcemessage)
		If @mycounter = 7 return @sourcemessage
		if @mycounter = @which return(left(@sourcemessage, @where - 1))
		set	@sourcemessage = right(@sourcemessage, (len(@sourcemessage) - @where))	
	end --while
	
	--should not execute this but a return is required as the last statement
	return @sourcemessage
end
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[DF_ApplicationRejects_InformationTypeID]...';


GO
ALTER TABLE [dbo].[ApplicationRejects]
    ADD CONSTRAINT [DF_ApplicationRejects_InformationTypeID] DEFAULT ([SystemLog].[GetInformationTypeID]('Error')) FOR [InformationTypeID];


GO
PRINT N'Creating [Cube].[DimTime]...';


GO
Create view Cube.DimTime as 
SELECT        IDTime, DateOfDay, DayName, DayNbOfTheWeek, DayNbOfTheMonth, DayNbOfTheYear, MonthName, MonthNb, WeekNbOfTheMonth, QuaterNb, YearNb, 
                         IsWeekDayFlag, IsHolidayFlag, 'Quarter ' + CAST(QuaterNb AS varchar(1)) AS QuarterName, YearNb * 100 + QuaterNb AS QuaterYear, YearNb * 100 + MonthNb AS MonthYear
FROM            DW.DimTime
GO
PRINT N'Creating [Cube].[FactOrders]...';


GO
CREATE VIEW [Cube].[FactOrders]
AS 
SELECT [IDOrderDate]
      ,[IDShipDate]
      ,[IDDueDate]
      ,[IDProduct]
      ,[IDCustomer]
      ,[IDBillingAddress]
      ,[IDShippingAddress]
      ,[IDOrderProvenance]
      ,[OrderQy]
      ,[UnitPrice]
      ,[Discount]
      ,[TaxAmount]
      ,[Freight]
  FROM [DW].[FactOrders]
GO
PRINT N'Creating [SystemLog].[CloseLoadExecution]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [SystemLog].[CloseLoadExecution]
	@LoadExecutionId BIGINT
AS
	-- Reterive Catalog Execution statstics and insert them into [SystemLog].[ExecutionStatistics] table
	INSERT INTO SystemLog.ExecutionStatictics
	        ( LoadExecutionId ,
	          SSISProjectName ,
	          SSISPackageName ,
	          SSISPackageStartDateTime ,
	          SSISPackageEndDateTime ,
	          DataFlowPathIdString ,
	          SourceComponentName ,
	          DestinationComponentName ,
	          RowsSent
	        )
	VALUES  ( 0 , -- LoadExecutionId - bigint
	          N'' , -- SSISProjectName - nvarchar(260)
	          N'' , -- SSISPackageName - nvarchar(260)
	          SYSDATETIMEOFFSET() , -- SSISPackageStartDateTime - datetimeoffset(7)
	          SYSDATETIMEOFFSET() , -- SSISPackageEndDateTime - datetimeoffset(7)
	          N'' , -- DataFlowPathIdString - nvarchar(4000)
	          N'' , -- SourceComponentName - nvarchar(500)
	          N'' , -- DestinationComponentName - nvarchar(500)
	          0  -- RowsSent - int
	        )
RETURN 0
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [SystemLog].[OpenLoadExecution]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [SystemLog].[OpenLoadExecution]
    @ServerExecutionId BIGINT = 0 ,
    @LoadId BIGINT = -1 ,
    @LoadExectionId BIGINT OUTPUT
AS
    DECLARE @FailureStatusId TINYINT = 0 ,
        @RunningStatusId TINYINT = 0 ,
        @LoadDateTime DATETIME = GETDATE();
    DECLARE @LoadIdTbl TABLE
        (
          LoadExecutionId BIGINT
        );
     --Get StatusId for Falied loads
    SELECT  @FailureStatusId = s.ExecutionStatusId
    FROM    SystemLog.ExecutionStatus s
    WHERE   s.ExecutionStatusName = N'Failed';

	--Get StatusId for Running loads
    SELECT  @RunningStatusId = s.ExecutionStatusId
    FROM    SystemLog.ExecutionStatus AS s
    WHERE   s.ExecutionStatusName = 'Running';

	--If the SystemLog.Loads table is used, get its LoadDtartDateTime to have a consistent Start date and time in our loads
    IF ( @LoadId <> -1 )
        BEGIN
            SELECT  @LoadDateTime = l.LoadStartDateTime
            FROM    SystemLog.Loads AS l
            WHERE   LoadId = @LoadId;
        END;
	--Check if there are any pending loads for this Application. Terminate it if that's the case.
    IF EXISTS ( SELECT TOP 1
                        1
                FROM    SystemLog.LoadExecutions le
                WHERE   le.LoadId = @LoadId)
        BEGIN
            UPDATE  SystemLog.LoadExecutions
            SET       ExecutionStatusId = @FailureStatusId
			        , ExecutionEndDateTime = @LoadDateTime
            WHERE   LoadId = @LoadId;
        END;
    INSERT  INTO SystemLog.LoadExecutions
            ( SSISServerExecutionId ,
              LoadId ,
              ExecutionStatusId ,
              ExecutionStartDateTime ,
              ExecutionEndDateTime
	        )
    OUTPUT  Inserted.LoadExecutionId  --Retreive the Identity LoadExecutionId value
            INTO @LoadIdTbl ( LoadExecutionId )
    VALUES  ( @ServerExecutionId , -- SSISServerExecutionId - bigint
              @LoadId , -- LoadId - bigint
              @RunningStatusId , -- ExecutionStatusId - tinyint
              @LoadDateTime , -- ExecutionStartDateTime - datetime
              NULL  -- ExecutionEndDateTime - datetime
	        );

    --Return LoadExecutionId from insert statement above
    SELECT  @LoadExectionId = t.LoadExecutionId
    FROM    @LoadIdTbl AS t;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ac6d18e3-0304-4103-a9df-9a1e7208ab8b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ac6d18e3-0304-4103-a9df-9a1e7208ab8b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'af2a52ef-9849-474a-8e2f-aaa73c1b87c7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('af2a52ef-9849-474a-8e2f-aaa73c1b87c7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '48e4b2c8-2d9d-4162-a16d-8fc71ccdbd55')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('48e4b2c8-2d9d-4162-a16d-8fc71ccdbd55')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5b223277-9589-432b-b351-b906e56f4865')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5b223277-9589-432b-b351-b906e56f4865')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1b2ac67f-a323-4f66-a9ba-8ea07f304f38')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1b2ac67f-a323-4f66-a9ba-8ea07f304f38')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3580fd6f-89d1-484e-995c-5a567bf5dece')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3580fd6f-89d1-484e-995c-5a567bf5dece')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fb66c37a-f818-45c1-8d43-1315864b9e45')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fb66c37a-f818-45c1-8d43-1315864b9e45')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fba45c74-a971-4dfa-b8d5-6e829f0672b3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fba45c74-a971-4dfa-b8d5-6e829f0672b3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fe9b15a4-94ab-421d-b54c-2dd46c8cb67b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fe9b15a4-94ab-421d-b54c-2dd46c8cb67b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd7af03f8-3975-465a-a46f-219a251c2f53')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d7af03f8-3975-465a-a46f-219a251c2f53')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '883b5e62-b663-4459-902b-59f25c9f0f64')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('883b5e62-b663-4459-902b-59f25c9f0f64')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '97fb77c7-b08c-4654-bdca-7bd951f00653')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('97fb77c7-b08c-4654-bdca-7bd951f00653')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fe114ee8-e69a-4dd3-8cd5-2fdd615315be')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fe114ee8-e69a-4dd3-8cd5-2fdd615315be')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'eea55d82-7050-4a7e-8ab2-7fc748706c31')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('eea55d82-7050-4a7e-8ab2-7fc748706c31')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ace9f8b8-b4f1-49d1-80f4-12c0b40644fe')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ace9f8b8-b4f1-49d1-80f4-12c0b40644fe')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5a200521-80b9-42e0-b39c-8ffcf2ff9eeb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5a200521-80b9-42e0-b39c-8ffcf2ff9eeb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd4636434-094f-4575-b8b0-e8eb1f180b61')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d4636434-094f-4575-b8b0-e8eb1f180b61')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b967f637-87c5-4b9b-8a1d-918a869c96a7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b967f637-87c5-4b9b-8a1d-918a869c96a7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '883eb137-d6fb-4c02-85d5-b0e6abb98ef7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('883eb137-d6fb-4c02-85d5-b0e6abb98ef7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a5a51cec-5d93-40a9-893b-5f7f3349702a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a5a51cec-5d93-40a9-893b-5f7f3349702a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '581bcdea-f576-4805-b7ec-c726076fefe5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('581bcdea-f576-4805-b7ec-c726076fefe5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5f82f72d-f460-4d87-a0fc-9ecd96f6744a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5f82f72d-f460-4d87-a0fc-9ecd96f6744a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1d529888-4230-4c86-8539-606063f42a6e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1d529888-4230-4c86-8539-606063f42a6e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '26a18f2b-ba8c-42ac-8220-345a9f67b20c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('26a18f2b-ba8c-42ac-8220-345a9f67b20c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '139e9e17-d35d-4679-8ccd-de3e394f8494')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('139e9e17-d35d-4679-8ccd-de3e394f8494')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '151bd019-ce88-4c66-9d20-9f09dd1fde58')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('151bd019-ce88-4c66-9d20-9f09dd1fde58')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
--:R DimensionsUnknownMembers.sql

	--ExecutionMessageTypes fixed members
    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionMessageTypes]
                    WHERE   [ExecutionMessageTypeId] = 1 )
        BEGIN
            INSERT  [SystemLog].[ExecutionMessageTypes]
                    ( [ExecutionMessageTypeId] ,
                      [ExecutionMessageTypeName] ,
                      [ExecutionMessageTypeDescription]
                    )
            VALUES  ( 1 ,
                      N'Error' ,
                      N'The message logged contains the error derscription.'
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionMessageTypes]
                    WHERE   [ExecutionMessageTypeId] = 2 )
        BEGIN
            INSERT  [SystemLog].[ExecutionMessageTypes]
                    ( [ExecutionMessageTypeId] ,
                      [ExecutionMessageTypeName] ,
                      [ExecutionMessageTypeDescription]
                    )
            VALUES  ( 2 ,
                      N'Warning' ,
                      N'The message logged is a warning.'
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionMessageTypes]
                    WHERE   [ExecutionMessageTypeId] = 3 )
        BEGIN
            INSERT  [SystemLog].[ExecutionMessageTypes]
                    ( [ExecutionMessageTypeId] ,
                      [ExecutionMessageTypeName] ,
                      [ExecutionMessageTypeDescription]
                    )
            VALUES  ( 3 ,
                      N'Information' ,
                      N'The message logged is informative only.'
                    );
        END;


--ExecutionStatus fixed members
    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 0 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 0 ,
                      N'Unkmown' ,
                      N''
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 1 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 1 ,
                      N'Execution created' ,
                      N'The SSIS execution has been initiated.'
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 2 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 2 ,
                      N'Running' ,
                      N'The SSIS execution is currently running.'
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 3 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 3 ,
                      N'Cancelled' ,
                      N'The SSIS execution has been cancelled.'
                    );
        END;


    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 4 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 4 ,
                      N'Failed' ,
                      N'The SSIS execution encountered errors.'
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 5 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 5 ,
                      N'Pending' ,
                      N'The SSIS execution is pending.'
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 6 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 6 ,
                      N'Ended unexpectedly' ,
                      N'The SSIS execution could not finish.'
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 7 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 7 ,
                      N'Succeeded' ,
                      N'The SSIS execution completed successfully.'
                    );
        END;

    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 8 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 8 ,
                      N'Stopping' ,
                      N'The SSIS execution is currently stopping.'
                    );
        END;
    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[ExecutionStatus]
                    WHERE   [ExecutionStatusId] = 9 )
        BEGIN
            INSERT  [SystemLog].[ExecutionStatus]
                    ( [ExecutionStatusId] ,
                      [ExecutionStatusName] ,
                      [ExecutionStatusDescription]
                    )
            VALUES  ( 9 ,
                      N'Completed' ,
                      N'The SSIS execution has completed.'
                    );
        END;

   --SystmeLog.LoadApplication unkmown member
    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[LoadApplications] AS [la]
                    WHERE   [la].[LoadApplicationId] = 0 )
        BEGIN
            SET IDENTITY_INSERT [SystemLog].[LoadApplications] ON;
            INSERT  INTO [SystemLog].[LoadApplications]
                    ( [LoadApplicationId] ,
                      [ApplicationName] ,
                      [ApplicationDescription]
                    )
            VALUES  ( 0 ,
                      N'Unknown',
                      N'Unknown load application'
		            );
            SET IDENTITY_INSERT [SystemLog].[LoadApplications] OFF;
        END;

		--SystmeLog.LoadApplication SSIS CookBook application
    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[LoadApplications] AS [la]
                    WHERE   [la].[LoadApplicationId] = 1 )
        BEGIN
            SET IDENTITY_INSERT [SystemLog].[LoadApplications] ON;
            INSERT  INTO [SystemLog].[LoadApplications]
                    ( [LoadApplicationId] ,
                      [ApplicationName] ,
                      [ApplicationDescription]
                    )
            VALUES  ( 1 ,
                      N'SSIS CookBook',
                      N'SSIS CookBook sample application'
		            );
            SET IDENTITY_INSERT [SystemLog].[LoadApplications] OFF;
        END;

	--SystmeLog.Loads unkmown member
    IF NOT EXISTS ( SELECT TOP 1
                            1
                    FROM    [SystemLog].[Loads] AS [l]
                    WHERE   [l].[LoadId] =-1 )
        BEGIN
            SET IDENTITY_INSERT [SystemLog].[Loads] ON;
            INSERT  INTO [SystemLog].[Loads]
                    ( [LoadId] ,
                      [LoadStartDateTime] ,
                      [LoadEndDateTime] ,
                      [LoadStatusId],
					  [LoadApplicationId]
                    )
            VALUES  ( -1 ,
                      CAST('1900-01-01' AS DATETIME) ,
                      CAST('1900-01-01' AS DATETIME) ,
                      0,
					  0
		            );
            SET IDENTITY_INSERT [SystemLog].[Loads] OFF;
        END;
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
